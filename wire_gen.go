// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"KnowEase/controllers"
	"KnowEase/dao"
	"KnowEase/middleware"
	"KnowEase/routes"
	"KnowEase/services"
)

// Injectors from wire.go:

func InitializeApp() *routes.APP {
	string2 := ProvideDBConnectionString()
	db := dao.NewDB(string2)
	userDaoInterface := dao.ProvideUserDao(db)
	userService := services.NewUserService(userDaoInterface)
	emailDaoInterface := dao.ProvideEmailDao(db)
	emailService := services.NewEmailService(emailDaoInterface, userDaoInterface)
	tokenService := services.NewTokenService()
	userControllers := controllers.NewUserControllers(userService, emailService, tokenService)
	middlewareMiddleware := middleware.NewMiddleWare(tokenService)
	userSvc := routes.NewUserSvc(userControllers, middlewareMiddleware)
	likeDaoInterface := dao.ProvideLikeDao(db)
	postDaoInterface := dao.ProvidePostDao(db)
	likeService := services.NewLikeService(likeDaoInterface, postDaoInterface, userDaoInterface)
	postService := services.NewPostService(postDaoInterface, likeDaoInterface, userDaoInterface)
	likeControllers := controllers.NewLikeControllers(likeService, postService, userService)
	postControllers := controllers.NewPostControllers(postService, likeService, emailService, userService)
	postSvc := routes.NewPostSvc(likeControllers, middlewareMiddleware, postControllers)
	userPageSvc := routes.NewUserPageSvc(likeControllers, middlewareMiddleware, postControllers, userControllers)
	app := routes.NewApp(userSvc, postSvc, userPageSvc)
	return app
}
